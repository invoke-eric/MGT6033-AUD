{
  "title": "Quiz Questions",
  "sections": [
    {
      "title": "Section 1: Filtering and Regular Expressions in Pandas",
      "questions": [
        {
          "number": 1,
          "difficulty": "Easy",
          "type": "single_select",
          "question": "What is the purpose of using `str.contains(r'sent', case=False)` on the 'folder' column in the Enron email dataset?",
          "options": {
            "A": "To sort the DataFrame by folder name",
            "B": "To filter rows where the folder name contains 'sent', case-insensitive",
            "C": "To remove all emails from the dataset",
            "D": "To extract the sender’s email address"
          }
        },
        {
          "number": 2,
          "difficulty": "Unknown",
          "type": "single_select",
          "question": "**(Medium, Select all that apply):** Why might using word boundaries (`\\b`) in a regex pattern fail to match folders like '_sent_mail' or 'sent_items'?",
          "options": {
            "A": "The underscore is not considered a word boundary in regex",
            "B": "Word boundaries only match spaces",
            "C": "The folder names contain punctuation or underscores",
            "D": "Word boundaries only work at the start or end of strings"
          }
        },
        {
          "number": 3,
          "difficulty": "Hard",
          "type": "single_select",
          "question": "What is the main advantage of using look-around operators (look-ahead and look-behind) when filtering folder names with regex?",
          "options": {
            "A": "They allow matching patterns only if certain characters appear before or after, without including those characters in the match",
            "B": "They increase the speed of the regex search",
            "C": "They always match partial words",
            "D": "They remove all punctuation from the folder name"
          }
        },
        {
          "number": 4,
          "difficulty": "Unknown",
          "type": "single_select",
          "question": "**(Medium, Select all that apply):** Which of the following are included in the custom character class for defining word boundaries in the advanced regex pattern for folder filtering?",
          "options": {
            "A": "Underscore",
            "B": "Period",
            "C": "Whitespace",
            "D": "Semicolon"
          }
        },
        {
          "number": 5,
          "difficulty": "Hard",
          "type": "single_select",
          "question": "What is the effect of using the pattern `(^|(?<=[_.,;?!\\s]))(sent)($|(?=[_.,;?!\\s]))` in the folder filter?",
          "options": {
            "A": "It matches 'sent' as a standalone word or surrounded by specified punctuation/whitespace",
            "B": "It matches any folder containing 'sent' as a substring",
            "C": "It excludes all folders with underscores",
            "D": "It only matches folders at the start of the DataFrame"
          }
        }
      ]
    },
    {
      "title": "Section 2: Parsing Email Metadata and Messages",
      "questions": [
        {
          "number": 6,
          "difficulty": "Easy",
          "type": "single_select",
          "question": "What does the regular expression `r'^(Date)(\\:\\s+)(.+?)$'` with the `re.M` flag match in an email message?",
          "options": {
            "A": "The sender’s email address",
            "B": "The date and time line in the email header",
            "C": "The subject line",
            "D": "The entire message body"
          }
        },
        {
          "number": 7,
          "difficulty": "Unknown",
          "type": "single_select",
          "question": "**(Medium, Select all that apply):** Which metadata fields are extracted using similar regex patterns in the parsing function?",
          "options": {
            "A": "Date",
            "B": "From",
            "C": "To",
            "D": "X-From"
          }
        },
        {
          "number": 8,
          "difficulty": "Hard",
          "type": "single_select",
          "question": "Why is the `re.M` (multiline) flag necessary when searching for metadata fields in the email message string?",
          "options": {
            "A": "It allows the regex to treat each line as a separate string, matching at the start of each line",
            "B": "It makes the regex case-insensitive",
            "C": "It increases the speed of matching",
            "D": "It allows matching multiple groups at once"
          }
        },
        {
          "number": 9,
          "difficulty": "Unknown",
          "type": "single_select",
          "question": "**(Hard, Select all that apply):** What is the purpose of initializing all extracted metadata variables to `None` at the start of the parsing function?",
          "options": {
            "A": "To avoid errors if a field is missing",
            "B": "To ensure a consistent return structure",
            "C": "To skip lines containing missing data",
            "D": "To allow for optional fields in the email"
          }
        },
        {
          "number": 10,
          "difficulty": "Hard",
          "type": "single_select",
          "question": "In the message parsing logic, what is the role of the `found_x` and `capture` variables?",
          "options": {
            "A": "They control when to start capturing the actual message content after the last metadata line",
            "B": "They store the sender and recipient names",
            "C": "They track the number of lines in the message",
            "D": "They indicate if the message is spam"
          }
        }
      ]
    },
    {
      "title": "Section 3: DataFrame Construction and Analysis",
      "questions": [
        {
          "number": 11,
          "difficulty": "Easy",
          "type": "single_select",
          "question": "After parsing, what does each row in the resulting DataFrame represent?",
          "options": {
            "A": "A unique email message with its parsed metadata and body",
            "B": "A folder in the email server",
            "C": "A user account",
            "D": "A timestamp only"
          }
        },
        {
          "number": 12,
          "difficulty": "Unknown",
          "type": "single_select",
          "question": "**(Medium, Select all that apply):** Which columns are present in the parsed DataFrame after running the `parse_email` function?",
          "options": {
            "A": "timestamp",
            "B": "from_email",
            "C": "to_email",
            "D": "msg"
          }
        },
        {
          "number": 13,
          "difficulty": "Medium",
          "type": "single_select",
          "question": "What pandas method is used to count the number of emails sent by each sender?",
          "options": {
            "A": "groupby()",
            "B": "value_counts()",
            "C": "sort_values()",
            "D": "count()"
          }
        },
        {
          "number": 14,
          "difficulty": "Unknown",
          "type": "single_select",
          "question": "**(Hard, Select all that apply):** What steps did Robbie use to analyze the hour of day when most emails were sent?",
          "options": {
            "A": "Convert the 'timestamp' column to UTC datetime",
            "B": "Use `.dt.hour` to extract the hour",
            "C": "Use `value_counts()` to count occurrences",
            "D": "Plot a histogram of the hours"
          }
        },
        {
          "number": 15,
          "difficulty": "Hard",
          "type": "single_select",
          "question": "Why might the 'timestamp' column be an object type instead of datetime, even after parsing?",
          "options": {
            "A": "Because time zone offsets are included and must be normalized to UTC",
            "B": "Because pandas cannot parse dates",
            "C": "Because the column contains missing values",
            "D": "Because the DataFrame is too large"
          }
        }
      ]
    },
    {
      "title": "Section 4: Searching for Keywords and Executive Emails",
      "questions": [
        {
          "number": 16,
          "difficulty": "Easy",
          "type": "single_select",
          "question": "What pandas string method is used to search for emails mentioning the word \"fraud\"?",
          "options": {
            "A": "str.find()",
            "B": "str.contains()",
            "C": "str.replace()",
            "D": "str.upper()"
          }
        },
        {
          "number": 17,
          "difficulty": "Unknown",
          "type": "single_select",
          "question": "**(Medium, Select all that apply):** What is the purpose of searching for executive last names (e.g., 'lay', 'skilling', 'fastow') in the 'from_email' column using `str.contains()` and `value_counts()`?",
          "options": {
            "A": "To identify emails sent by key Enron executives",
            "B": "To filter emails for legal review",
            "C": "To count the number of emails mentioning executives",
            "D": "To analyze communication patterns of leadership"
          }
        },
        {
          "number": 18,
          "difficulty": "Hard",
          "type": "single_select",
          "question": "Why might there be very few sent emails from executives like Ken Lay or Andy Fastow in the dataset?",
          "options": {
            "A": "Their sent emails may be stored in other folders",
            "B": "They may have used assistants or alternate accounts",
            "C": "The dataset may be incomplete",
            "D": "All of the above"
          }
        },
        {
          "number": 19,
          "difficulty": "Unknown",
          "type": "single_select",
          "question": "**(Hard, Select all that apply):** What can you infer from analyzing emails that mention \"fraud\"?",
          "options": {
            "A": "Many are legal notifications or news articles",
            "B": "Not all are direct discussions of Enron’s fraud",
            "C": "Some are copied/pasted from external sources",
            "D": "All are internal whistleblower reports"
          }
        },
        {
          "number": 20,
          "difficulty": "Hard",
          "type": "single_select",
          "question": "What is the main benefit of using regular expressions and pandas string methods together for email analysis?",
          "options": {
            "A": "They allow efficient, flexible filtering, extraction, and organization of unstructured text data",
            "B": "They guarantee perfect parsing of all messages",
            "C": "They convert all emails to CSV format",
            "D": "They encrypt email content"
          }
        }
      ]
    }
  ]
}